/*
 * Ski Data API for NEU Seattle distributed systems course
 * An API for an emulation of skier managment system for RFID tagged lift tickets. Basis for CS6650 Assignments for 2019
 *
 * OpenAPI spec version: 1.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.model.LiftRide;
import io.swagger.client.model.ResponseMsg;
import io.swagger.client.model.SkierVertical;
import java.util.Arrays;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import sun.net.www.protocol.http.HttpCallerInfo;

/**
 * API tests for SkiersApi
 */
@Ignore
public class SkiersApiTest {

    private final SkiersApi api = new SkiersApi();

    /**
     * 
     *
     * get the total vertical for the skier for the specified ski day
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkierDayVerticalTest() throws ApiException {
        String resortID = null;
        String dayID = null;
        String skierID = null;
        ApiClient client = api.getApiClient();
        client.setBasePath("http://54.236.50.254:8080/hw1_war");
        int code = 0;
        try {
            api.getSkierDayVertical(resortID, dayID, skierID);
            ApiResponse<SkierVertical> res = api.getSkierDayVerticalWithHttpInfo(skierID, dayID, resortID);
            code = res.getStatusCode();
        } catch(ApiException e) {
            System.out.println("1");
            Assert.assertEquals("Missing the required parameter 'resortID' when calling getSkierDayVertical(Async)", e.getMessage());
            code = e.getCode();

        }
//        Assert.assertEquals(code, 404);

        resortID = "Mission";
        dayID = "10";
        skierID = "34234";
        SkierVertical response = api.getSkierDayVertical(resortID, dayID, skierID);

        Assert.assertEquals(response.getResortID(), "Mission");
        Assert.assertEquals(response.getTotalVert().toString(), "56734");
        Assert.assertEquals(response.toString(), "class SkierVertical {\n"
            + "    resortID: Mission\n"
            + "    totalVert: 56734\n"
            + "}");

//        Assert.assertEquals(api.getApiClient().getHttpClient(), 200);
        try {
            ApiResponse<SkierVertical> res = api.getSkierDayVerticalWithHttpInfo(skierID, dayID, resortID);
            code = res.getStatusCode();
            Assert.assertEquals(code, 200);
        } catch (ApiException e) {
            code = e.getCode();
        }
        Assert.assertEquals(code, 200);

    }
    /**
     * get the total vertical for the skier for the specified resort
     *
     * get the total vertical for the skier the specified resort.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkierResortTotalsTest() throws ApiException {
        String skierID = null;
        List<String> resort = null;
        ApiClient client = api.getApiClient();
        client.setBasePath("http://54.236.50.254:8080/hw1_war");

//        SkierVertical response = api.getSkierResortTotals(skierID, resort);
        try {
            api.getSkierResortTotals(skierID, resort);
            Assert.fail();
        } catch(ApiException e) {
            Assert.assertEquals("Missing the required parameter 'skierID' when calling getSkierResortTotals(Async)", e.getMessage());
        }
        skierID = "34234";
        resort = Arrays.asList("bali");
        SkierVertical response = api.getSkierResortTotals(skierID, resort);
        Assert.assertEquals(response.getResortID(), "bali");
        Assert.assertEquals(response.getTotalVert().toString(), "56734");
        Assert.assertEquals(response.toString(), "class SkierVertical {\n"
            + "    resortID: bali\n"
            + "    totalVert: 56734\n"
            + "}");
    }

    /**
     * write a new lift ride for the skier
     *
     * Stores new lift ride details in the data store
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void writeNewLiftRideTest() throws ApiException {
        LiftRide body = null;
        ApiClient client = api.getApiClient();
        client.setBasePath("http://54.236.50.254:8080/hw1_war");
        try {
            api.writeNewLiftRide(body);
            Assert.fail();
        } catch(ApiException e) {
            Assert.assertEquals("Missing the required parameter 'body' when calling writeNewLiftRide(Async)", e.getMessage());
        }
        body = new LiftRide();
        body.setDayID("21");
        body.setResortID("bali");
        body.setLiftID("45352");
        body.setSkierID("3324");
        body.setTime("34");
        Assert.assertEquals(body.toString(), "class LiftRide {\n"
            + "    resortID: bali\n"
            + "    dayID: 21\n"
            + "    skierID: 3324\n"
            + "    time: 34\n"
            + "    liftID: 45352\n"
            + "}");
    }
}
